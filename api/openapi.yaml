openapi: 3.0.1
info:
  contact:
    email: support@cochl.ai
  description: |
    Cochl.Sense API allows to detect what is contained inside sound data. Send audio
    data over the internet to discover what it contains.

    ```
    npx @openapitools/openapi-generator-cli generate -i openapi.json -g python -o python-client
    ```
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://cochl.ai
  title: Cochl.Sense API
  version: v1.0.0
externalDocs:
  description: Link to our general documentation
  url: https://docs.cochl.ai
servers:
- url: https://api.cochl.ai/sense/api/v0/
tags:
- description: |
    Sense API Audio Session is the heart of the API. An audio session represents
    one audio source that will be inferenced*. An audio source can be either a file
    or a stream.

    **inferenced: analyzed by our deep learning neural network*

    ### Lifetime
    An audio session goes through 3 states during its lifetime :

    *writable -> readonly -> deleted*

    - The chunk can be uploaded if and only if session is *writable*
    - Status can be readonly if and only if session is *not deleted*

    A state can become *readonly*
    - By manually updating the session with a PATCH request
    - When an error occurs
    - When session total_size has been reached

    A state can become *deleted*.
    - By manually deleting session with a DELETE request
    - When the session becomes inactive*

    **inactive: a session is considered inactive if no chunks have been uploaded
    for more than one hour*


    ### Upload
    Audio needs to be sent to the server by chunk. The maximum allowed size of
    a chunk is *1MiB* *(1MiB == 1024KiB)*

    - For a **stream**, we recommend sending **half second long** audio chunk.
    This allows having the shortest latency between audio recording and
    inferenced results.
    - For a **file**, we recommend sending a file by chunk of **1MiB** audio chunks.

    One big difference between stream and file is how they are decoded.
    For a stream, we recommend every chunk is required to be decodable*, whereas, for
    a file, the concatenation of all the chunks needs to be decodable.

    **decodable: an audio source is decodable if by having only the content-type
    and the raw data, it is possible to decode the audio*


    ### Inference
    Once chunks are received, our server will begin to inference automatically.
    - For a **stream**, chunks are **inferenced immediately**
    - For a **file**, chunks are **inferenced when session state becomes readonly**


    ### Status
    Inference results can be retrieved on the status endpoint.

    To get all results of a given session, it is recommended to use `next_token`.
    It gives the warranty to read all results incorrect order exactly once.

    *Note: In the future, results from the deleted audio session will be accessible on
    another endpoint*


    ### Error
    In case an error occurs during a session, that session will become readonly
    and pending inferences of chunks are canceled. An error message will be
    available in the session status.

    A typical error is a content-type decoding error. For instance, audio/wav data may have been misclassified as audio/mp3 data.
  name: Audio Session
paths:
  /audio_sessions/:
    post:
      description: |
        Create a new session. An API key is required. Session parameters are
        immutable and can be set at creation only.
      operationId: create_session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSession'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionRefs'
          description: |
            The session was created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            The parameter is missing or not formatted properly
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Authentication failed. For instance, API key is missing or invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Unexpected server error. If the error persists, you can
            contact support@cochl.ai to fix the problem.
      security:
      - API_Key: []
      summary: Create Session
      tags:
      - Audio Session
      x-contentType: application/json
      x-accepts: application/json
  /audio_sessions/{session_id}:
    delete:
      description: |
        Change the state of the session to *deleted*. All future call on the session
        will return 404
      operationId: delete_session
      parameters:
      - description: |
          Session id represents a unique identifier for an audio session
        explode: false
        in: path
        name: session_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: |
            The session successfully deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Resources don't exist or have been deleted
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Unexpected server error. If the error persists, you can
            contact support@cochl.ai to fix the problem.
      summary: Delete Session
      tags:
      - Audio Session
      x-accepts: application/json
    patch:
      description: |
        Update a session
      operationId: update_session
      parameters:
      - description: |
          Session id represents a unique identifier for an audio session
        explode: false
        in: path
        name: session_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSession'
        required: true
      responses:
        "204":
          description: |
            The session has been updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            The parameter is missing or not formatted properly
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Resources don’t exist or have been deleted
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Unexpected server error. If the error persists, you can
            contact support@cochl.ai to fix the problem.
      summary: Update Session
      tags:
      - Audio Session
      x-contentType: application/json
      x-accepts: application/json
  /audio_sessions/{session_id}/status:
    get:
      description: |
        Get session status

        *Note that if all chunks didn't finish to be inferenced, the server will
        wait for at least one result to be  available in the required page range
        before returning result. Such waiting can lead to HTTP requests timeout.
        Therefore we recommend implementing a client retry logic.*
      operationId: read_status
      parameters:
      - description: |
          Session id represents a unique identifier for an audio session
        explode: false
        in: path
        name: session_id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          How many existing elements to skip before returning the first result
          control how many results to receive
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Limit the length of the returned results array to limit the size of the
          returned payload
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 1024
          maximum: 1024
          minimum: 1
          type: integer
        style: form
      - description: |
          The next token can be used from a previous page result. It allows to
          iterating through all the next elements of a collection. If next_token is
          set, offset and limit will be ignored
        explode: true
        in: query
        name: next_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionStatus'
          description: |
            Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Parameter is missing or not formatted properly
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Resources don’t exist or have been deleted
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Unexpected server error. If the error persists, you can
            contact support@cochl.ai to fix the problem.
      summary: Read Status
      tags:
      - Audio Session
      x-accepts: application/json
  /audio_sessions/{session_id}/chunks/{chunk_sequence}:
    put:
      description: |
        Upload new audio chunk
      operationId: upload_chunk
      parameters:
      - description: |
          Session id represents a unique identifier for an audio session
        explode: false
        in: path
        name: session_id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Chunk represents the chunk number. This is needed to be a counter
          starting from 0 and growing by one on each request
        explode: false
        in: path
        name: chunk_sequence
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioChunk'
        description: |
          raw binary chunk
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionRefs'
          description: |
            The chunk successfully uploaded
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            The parameter is missing or not formatted properly
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            The session is not writable anymore
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Resources don’t exist or have been deleted
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            The chunk sequence is invalid
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Audio chunk size must be smaller than 1MiB
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: |
            Unexpected server error. If the error persists, you can
            contact support@cochl.ai to fix the problem.
      summary: Upload Chunk
      tags:
      - Audio Session
      x-contentType: application/json
      x-accepts: application/json
components:
  parameters:
    SessionID:
      description: |
        Session id represents a unique identifier for an audio session
      explode: false
      in: path
      name: session_id
      required: true
      schema:
        type: string
      style: simple
    ChunkSequence:
      description: |
        Chunk represent the chunk number. This is needs to be  counter
        starting from 0 and growing by one on each requests
      explode: false
      in: path
      name: chunk_sequence
      required: true
      schema:
        type: integer
      style: simple
    PageOffset:
      description: |
        How many existing elements to skip before returning the first result
        control how many result to receive
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        minimum: 0
        type: integer
      style: form
    PageCount:
      description: |
        Limit the length of the returned results array to limit size of the
        returned payload
      explode: true
      in: query
      name: count
      required: false
      schema:
        default: 1024
        maximum: 1024
        minimum: 0
        type: integer
      style: form
    PageNext:
      description: |
        next token can be used from a previous page result. It allows to
        iterate through all next elements of a collection. If next_token is
        set, offset and limit will be ignored
      explode: true
      in: query
      name: next_token
      required: false
      schema:
        type: string
      style: form
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: |
        The parameter is missing or not formated properly
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: |
        authentication failed. For instance api key is missing or invalid
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: |
        resources doesn't exist or has been deleted
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: |
        unexpected server error. If error persists, you can
        contact support@cochl.ai to fix the problem.
  schemas:
    AudioChunk:
      description: |
        AudioChunk
      example:
        data: data
      properties:
        data:
          description: |
            Raw audio encoded as base64
          type: string
      required:
      - data
      type: object
    AudioContentType:
      description: Type of audio to send.
      example: audio/x-raw; rate=44100; format=s24le
      type: string
    AudioService:
      description: |
        Type of audio service. Check
        [service documentation](https://docs.cochl.ai/todo) for an exaustive
        list of available services
      type: string
    AudioMetadatas:
      additionalProperties:
        type: string
      description: |
        Type of audio session's metadatas. Check
        [metadatas documentation](https://docs.cochl.ai/todo) for an exaustive
        list of available metadatas
      type: object
    AudioType:
      description: |
        Whether the audio that will be sent is a stream or a file
      enum:
      - stream
      - file
      example: stream
      type: string
    CreateSession:
      description: |
        Options to create a new session.

        Make sure that specified type and content_type are compatible.
        [more info](https://docs.cochl.ai/todo)
      example:
        content_type: audio/x-raw; rate=44100; format=s24le
        metadatas:
          key: metadatas
        service: service
        total_size: 1
        type: stream
      properties:
        content_type:
          description: Type of audio to send.
          example: audio/x-raw; rate=44100; format=s24le
          type: string
        type:
          $ref: '#/components/schemas/AudioType'
        service:
          description: |
            Type of audio service. Check
            [service documentation](https://docs.cochl.ai/todo) for an exaustive
            list of available services
          type: string
        metadatas:
          additionalProperties:
            type: string
          description: |
            Type of audio session's metadatas. Check
            [metadatas documentation](https://docs.cochl.ai/todo) for an exaustive
            list of available metadatas
          type: object
        total_size:
          description: |
            If set, it allows to automatically change the state of the session
            to `readonly` when at least `total_size` bytes of audio chunk has
            been uploaded.

            For stream, this can be used to limit the maximum duration of the
            session.

            For a file, this allows to automatically start inferencing when the
            whole file has been sent. We recommend to set the size for files as
            it allows to do one less API call to start the inferencing
          minimum: 1
          type: integer
      required:
      - content_type
      - type
      type: object
    GenericError:
      description: |
        Error is sent when an error happens
      properties:
        status_code:
          description: |
            HTTP status code returned
          type: integer
        error:
          description: |
            Human-readable description of the error. *Note that the value should
            not be used programmatically as the description might be changed at
            any moment*
          type: string
      required:
      - error
      - status_code
      type: object
    Page:
      description: |
        Contains the range of elements that have been returned for a given
        collection
      example:
        total: 4096
        offset: 2048
        count: 1024
        next_token: next_token
      properties:
        offset:
          description: |
            Index of the first return element
          example: 2048
          minimum: 0
          type: integer
        count:
          description: |
            The number of elements that have been returned
          example: 1024
          maximum: 1024
          minimum: 0
          type: integer
        total:
          description: |
            The total number of available elements in the collection at the moment
          example: 4096
          minimum: 0
          type: integer
        next_token:
          description: |
            The next token can be used in the next page request to get the following
            results. If not present, it means that the page has reached the end of
            the collection
          type: string
      required:
      - count
      - offset
      - total
      type: object
    Sense:
      description: |
        Inference related status
      example:
        in_progress: true
        page:
          total: 4096
          offset: 2048
          count: 1024
          next_token: next_token
        results:
        - start_time: 6.027456183070403
          probability: 0.08008281904610115
          end_time: 1.4658129805029452
          tag: Knock
        - start_time: 6.027456183070403
          probability: 0.08008281904610115
          end_time: 1.4658129805029452
          tag: Knock
      properties:
        in_progress:
          description: |
            Is true when there are still some pending chunks that were uploaded
            but are not inferenced yet
          type: boolean
        page:
          $ref: '#/components/schemas/Page'
        results:
          description: |
            Contains paginated results of what has been inferenced so far
          items:
            $ref: '#/components/schemas/SenseEvent'
          type: array
      type: object
    SenseEvent:
      description: |
        Contains data returned by the model
      example:
        start_time: 6.027456183070403
        probability: 0.08008281904610115
        end_time: 1.4658129805029452
        tag: Knock
      properties:
        probability:
          description: |
            Probability that the event occurred. 0. means not possible at all and
            1. means that it is certain
          format: double
          maximum: 1
          minimum: 0
          type: number
        start_time:
          description: |
            Represent the start of the window, in the second, where inference was done.
            *Note that start_time will increase by window_hop on every step*
          format: double
          type: number
        end_time:
          description: |
            Represent the end of the window, in the second where inference was done.
            *Note that end_time is window_length after start_time*
          format: double
          type: number
        tag:
          description: |
            Name of what was recognized during inference.
          example: Knock
          type: string
      required:
      - end_time
      - probability
      - start_time
      - tag
      type: object
    SessionRefs:
      description: |
        List of session links
      example:
        session_id: 5vlv0r6SBUPYaUju1PFFalGhGVcyg
        chunk_sequence: 0
      properties:
        session_id:
          description: |
            Session id of the session that can be used to interact with API
          example: 5vlv0r6SBUPYaUju1PFFalGhGVcyg
          type: string
        chunk_sequence:
          description: |
            Chunk is uploaded in sequence. This represents the sequence of the
            next chunk to upload
          example: 0
          type: integer
      required:
      - chunk_sequence
      - session_id
      type: object
    SessionStatus:
      description: |
        Contains all the data for the product Cochl.Sense
      example:
        inference:
          in_progress: true
          page:
            total: 4096
            offset: 2048
            count: 1024
            next_token: next_token
          results:
          - start_time: 6.027456183070403
            probability: 0.08008281904610115
            end_time: 1.4658129805029452
            tag: Knock
          - start_time: 6.027456183070403
            probability: 0.08008281904610115
            end_time: 1.4658129805029452
            tag: Knock
        refs:
          session_id: 5vlv0r6SBUPYaUju1PFFalGhGVcyg
          chunk_sequence: 0
        state: writable
        error: error
      properties:
        state:
          description: |
            State in which the session is
          enum:
          - writable
          - readonly
          type: string
        error:
          description: |
            An error occurred during the session
          type: string
        refs:
          $ref: '#/components/schemas/SessionRefs'
        inference:
          $ref: '#/components/schemas/Sense'
      required:
      - inference
      - refs
      - state
      type: object
    UpdateSession:
      description: |
        modify session state
      example:
        make_readonly: true
      properties:
        make_readonly:
          description: |
            If set to true, will set session state to readonly

            *Note that setting make_readonly to false once the session is readonly
            will not make the session writable again*
          type: boolean
      type: object
  securitySchemes:
    API_Key:
      description: |
        We use a simple API key to authenticate requests on the backend. API keys are
        scoped to a given project. To get an API key, go to the
        [dashboard projects page](https://dashboard.cochl.ai/projects/api).
        One key is available for each project. If no projects are
        present, create one by clicking "*add new project*" allows creating a new project.

        Once the key is retrieved, it will be required to be passed in the HTTP
        request headers `x-api-key: YOUR_API_KEY`
      in: header
      name: x-api-key
      type: apiKey

