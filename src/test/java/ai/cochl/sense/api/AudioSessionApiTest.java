/*
 * Cochl. Sense API
 * Cochl. Sense API allows to detect what is contained inside sound. Send audio data over the internet and discover what it contains  That page contains the openapi specification of Cochl. Sense API. Feel free to *download* and use the specification as you wish. For instance,  you could generate any client to interact with our backend by using  [openapi generator](https://openapi-generator.tech/). With `npx` and `java`  installed locally, python client could be generated by running    ``` npx @openapitools/openapi-generator-cli generate -i openapi.json -g python -o python-client ``` 
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: support@cochl.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.cochl.sense.api;

import ai.cochl.client.ApiException;
import ai.cochl.sense.model.AudioChunk;
import ai.cochl.sense.model.CreateSession;
import ai.cochl.sense.model.GenericError;
import ai.cochl.sense.model.SessionRefs;
import ai.cochl.sense.model.SessionStatus;
import ai.cochl.sense.model.UpdateSession;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AudioSessionApi
 */
@Ignore
public class AudioSessionApiTest {

    private final AudioSessionApi api = new AudioSessionApi();

    
    /**
     * Create Session
     *
     * Create a new session. An api key is required. Session parameters are  immutable and can be set at creation only 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSessionTest() throws ApiException {
        CreateSession createSession = null;
        SessionRefs response = api.createSession(createSession);

        // TODO: test validations
    }
    
    /**
     * Delete Session
     *
     * Change state of session to *deleted*. All future call on the session  will return 404 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSessionTest() throws ApiException {
        String sessionId = null;
        api.deleteSession(sessionId);

        // TODO: test validations
    }
    
    /**
     * Read Status
     *
     * Get session status  *Note that if all chunks didn&#39;t finish to be inferenced, server will  wait at least one result to be  available in the required page range before returning result. Such waiting can lead to http requests timeout. Therefore we recommand to implement a client retry logic* 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStatusTest() throws ApiException {
        String sessionId = null;
        Integer offset = null;
        Integer count = null;
        String nextToken = null;
        SessionStatus response = api.readStatus(sessionId, offset, count, nextToken);

        // TODO: test validations
    }
    
    /**
     * Update Session
     *
     * Update a session 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSessionTest() throws ApiException {
        String sessionId = null;
        UpdateSession updateSession = null;
        api.updateSession(sessionId, updateSession);

        // TODO: test validations
    }
    
    /**
     * Upload Chunk
     *
     * Upload new audio chunk  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadChunkTest() throws ApiException {
        String sessionId = null;
        Integer chunkSequence = null;
        AudioChunk audioChunk = null;
        SessionRefs response = api.uploadChunk(sessionId, chunkSequence, audioChunk);

        // TODO: test validations
    }
    
}
