/*
 * Cochl. Sense API
 * Cochl. Sense API allows to detect what is contained inside sound. Send audio data over the internet and discover what it contains  That page contains the openapi specification of Cochl. Sense API. Feel free to *download* and use the specification as you wish. For instance,  you could generate any client to interact with our backend by using  [openapi generator](https://openapi-generator.tech/). With `npx` and `java`  installed locally, python client could be generated by running    ``` npx @openapitools/openapi-generator-cli generate -i openapi.json -g python -o python-client ``` 
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: support@cochl.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.cochl.sense.model;

import java.util.Objects;
import java.util.Arrays;
import ai.cochl.sense.model.Page;
import ai.cochl.sense.model.SenseEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * inference related status 
 */
@ApiModel(description = "inference related status ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-13T09:34:55.860779Z[Etc/UTC]")
public class Sense {
  public static final String SERIALIZED_NAME_IN_PROGRESS = "in_progress";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS)
  private Boolean inProgress;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Page page;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<SenseEvent> results = null;


  public Sense inProgress(Boolean inProgress) {
    
    this.inProgress = inProgress;
    return this;
  }

   /**
   * is true when there are still some pending chunks that were uploaded but are not inferenced yet 
   * @return inProgress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "is true when there are still some pending chunks that were uploaded but are not inferenced yet ")

  public Boolean getInProgress() {
    return inProgress;
  }


  public void setInProgress(Boolean inProgress) {
    this.inProgress = inProgress;
  }


  public Sense page(Page page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Page getPage() {
    return page;
  }


  public void setPage(Page page) {
    this.page = page;
  }


  public Sense results(List<SenseEvent> results) {
    
    this.results = results;
    return this;
  }

  public Sense addResultsItem(SenseEvent resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * contains paginated results of what has been inferenced so far 
   * @return results
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "contains paginated results of what has been inferenced so far ")

  public List<SenseEvent> getResults() {
    return results;
  }


  public void setResults(List<SenseEvent> results) {
    this.results = results;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sense sense = (Sense) o;
    return Objects.equals(this.inProgress, sense.inProgress) &&
        Objects.equals(this.page, sense.page) &&
        Objects.equals(this.results, sense.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inProgress, page, results);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sense {\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

