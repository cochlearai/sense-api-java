/*
 * Cochl. Sense API
 * Cochl. Sense API allows to detect what is contained inside sound. Send audio data over the internet and discover what it contains  That page contains the openapi specification of Cochl. Sense API. Feel free to *download* and use the specification as you wish. For instance,  you could generate any client to interact with our backend by using  [openapi generator](https://openapi-generator.tech/). With `npx` and `java`  installed locally, python client could be generated by running    ``` npx @openapitools/openapi-generator-cli generate -i openapi.json -g python -o python-client ``` 
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: support@cochl.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.cochl.sense.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * contains data returned by Cochl.Sense model 
 */
@ApiModel(description = "contains data returned by Cochl.Sense model ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SenseEvent {
  public static final String SERIALIZED_NAME_PROBABILITY = "probability";
  @SerializedName(SERIALIZED_NAME_PROBABILITY)
  private Double probability;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Double startTime;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Double endTime;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;


  public SenseEvent probability(Double probability) {
    
    this.probability = probability;
    return this;
  }

   /**
   * probablity that the event occured. 0. means not possible at all and  1. means that it is certain 
   * minimum: 0
   * maximum: 1
   * @return probability
  **/
  @ApiModelProperty(required = true, value = "probablity that the event occured. 0. means not possible at all and  1. means that it is certain ")

  public Double getProbability() {
    return probability;
  }


  public void setProbability(Double probability) {
    this.probability = probability;
  }


  public SenseEvent startTime(Double startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * represent start of the window, in second, where inference was done. Note that start_time will increase by window_hop on every step 
   * @return startTime
  **/
  @ApiModelProperty(required = true, value = "represent start of the window, in second, where inference was done. Note that start_time will increase by window_hop on every step ")

  public Double getStartTime() {
    return startTime;
  }


  public void setStartTime(Double startTime) {
    this.startTime = startTime;
  }


  public SenseEvent endTime(Double endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * represent end of the window, in second where inference was done. Note that end_time is window_length after start_time 
   * @return endTime
  **/
  @ApiModelProperty(required = true, value = "represent end of the window, in second where inference was done. Note that end_time is window_length after start_time ")

  public Double getEndTime() {
    return endTime;
  }


  public void setEndTime(Double endTime) {
    this.endTime = endTime;
  }


  public SenseEvent tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * name of what was recognized during inference. 
   * @return tag
  **/
  @ApiModelProperty(example = "Knock", required = true, value = "name of what was recognized during inference. ")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    this.tag = tag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SenseEvent senseEvent = (SenseEvent) o;
    return Objects.equals(this.probability, senseEvent.probability) &&
        Objects.equals(this.startTime, senseEvent.startTime) &&
        Objects.equals(this.endTime, senseEvent.endTime) &&
        Objects.equals(this.tag, senseEvent.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(probability, startTime, endTime, tag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SenseEvent {\n");
    sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

