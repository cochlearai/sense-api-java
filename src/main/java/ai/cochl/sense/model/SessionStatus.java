/*
 * Cochl. Sense API
 * Cochl. Sense API allows to detect what is contained inside sound. Send audio data over the internet and discover what it contains  That page contains the openapi specification of Cochl. Sense API. Feel free to *download* and use the specification as you wish. For instance,  you could generate any client to interact with our backend by using  [openapi generator](https://openapi-generator.tech/). With `npx` and `java`  installed locally, python client could be generated by running    ``` npx @openapitools/openapi-generator-cli generate -i openapi.json -g python -o python-client ``` 
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: support@cochl.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.cochl.sense.model;

import java.util.Objects;
import java.util.Arrays;
import ai.cochl.sense.model.Sense;
import ai.cochl.sense.model.SessionRefs;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * contains all the data for the product Cochl. Sense 
 */
@ApiModel(description = "contains all the data for the product Cochl. Sense ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-13T06:55:57.558403Z[Etc/UTC]")
public class SessionStatus {
  /**
   * state in which the session is 
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    WRITEABLE("writeable"),
    
    READONLY("readonly");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_REFS = "refs";
  @SerializedName(SERIALIZED_NAME_REFS)
  private SessionRefs refs;

  public static final String SERIALIZED_NAME_INFERENCE = "inference";
  @SerializedName(SERIALIZED_NAME_INFERENCE)
  private Sense inference;


  public SessionStatus state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * state in which the session is 
   * @return state
  **/
  @ApiModelProperty(required = true, value = "state in which the session is ")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public SessionStatus error(String error) {
    
    this.error = error;
    return this;
  }

   /**
   * an error occured during the session 
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "an error occured during the session ")

  public String getError() {
    return error;
  }


  public void setError(String error) {
    this.error = error;
  }


  public SessionStatus refs(SessionRefs refs) {
    
    this.refs = refs;
    return this;
  }

   /**
   * Get refs
   * @return refs
  **/
  @ApiModelProperty(required = true, value = "")

  public SessionRefs getRefs() {
    return refs;
  }


  public void setRefs(SessionRefs refs) {
    this.refs = refs;
  }


  public SessionStatus inference(Sense inference) {
    
    this.inference = inference;
    return this;
  }

   /**
   * Get inference
   * @return inference
  **/
  @ApiModelProperty(required = true, value = "")

  public Sense getInference() {
    return inference;
  }


  public void setInference(Sense inference) {
    this.inference = inference;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionStatus sessionStatus = (SessionStatus) o;
    return Objects.equals(this.state, sessionStatus.state) &&
        Objects.equals(this.error, sessionStatus.error) &&
        Objects.equals(this.refs, sessionStatus.refs) &&
        Objects.equals(this.inference, sessionStatus.inference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, error, refs, inference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionStatus {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    refs: ").append(toIndentedString(refs)).append("\n");
    sb.append("    inference: ").append(toIndentedString(inference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

