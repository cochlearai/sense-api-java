/*
 * Cochl. Sense API
 * Cochl. Sense API allows to detect what is contained inside sound. Send audio data over the internet and discover what it contains  That page contains the openapi specification of Cochl. Sense API. Feel free to *download* and use the specification as you wish. For instance,  you could generate any client to interact with our backend by using  [openapi generator](https://openapi-generator.tech/). With `npx` and `java`  installed locally, python client could be generated by running    ``` npx @openapitools/openapi-generator-cli generate -i openapi.json -g python -o python-client ``` 
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: support@cochl.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.cochl.sense.model;

import java.util.Objects;
import java.util.Arrays;
import ai.cochl.sense.model.AudioType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * options to create a new session.  Make sure that specified type and content_type are compatible. [more info](https://docs.cochl.ai/todo) 
 */
@ApiModel(description = "options to create a new session.  Make sure that specified type and content_type are compatible. [more info](https://docs.cochl.ai/todo) ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-13T06:55:57.558403Z[Etc/UTC]")
public class CreateSession {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AudioType type;

  public static final String SERIALIZED_NAME_TOTAL_SIZE = "total_size";
  @SerializedName(SERIALIZED_NAME_TOTAL_SIZE)
  private Integer totalSize;


  public CreateSession contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * type of audio to send. Check  [content-type documentation](https://docs.cochl.ai/todo) for an exaustive list of available content type 
   * @return contentType
  **/
  @ApiModelProperty(example = "audio/x-raw; rate=44100; format=s24le", required = true, value = "type of audio to send. Check  [content-type documentation](https://docs.cochl.ai/todo) for an exaustive list of available content type ")

  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public CreateSession type(AudioType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")

  public AudioType getType() {
    return type;
  }


  public void setType(AudioType type) {
    this.type = type;
  }


  public CreateSession totalSize(Integer totalSize) {
    
    this.totalSize = totalSize;
    return this;
  }

   /**
   * if set, it allows to automatically change the state of the session to &#x60;readonly&#x60; when at least &#x60;total_size&#x60; bytes of audio chunk have  been uploaded.   For stream, this can be used to limit the maximum duration of the  session.  For a file, this allows to automatically start inferencing when the  whole file has been sent. We recommand to set the size for files as  it allows to do one less API call to start the inferencing 
   * minimum: 1
   * @return totalSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if set, it allows to automatically change the state of the session to `readonly` when at least `total_size` bytes of audio chunk have  been uploaded.   For stream, this can be used to limit the maximum duration of the  session.  For a file, this allows to automatically start inferencing when the  whole file has been sent. We recommand to set the size for files as  it allows to do one less API call to start the inferencing ")

  public Integer getTotalSize() {
    return totalSize;
  }


  public void setTotalSize(Integer totalSize) {
    this.totalSize = totalSize;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSession createSession = (CreateSession) o;
    return Objects.equals(this.contentType, createSession.contentType) &&
        Objects.equals(this.type, createSession.type) &&
        Objects.equals(this.totalSize, createSession.totalSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, type, totalSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSession {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    totalSize: ").append(toIndentedString(totalSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

