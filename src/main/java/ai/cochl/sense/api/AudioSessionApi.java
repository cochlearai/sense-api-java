/*
 * Cochl. Sense API
 * Cochl. Sense API allows to detect what is contained inside sound. Send audio data over the internet and discover what it contains  That page contains the openapi specification of Cochl. Sense API. Feel free to *download* and use the specification as you wish. For instance,  you could generate any client to interact with our backend by using  [openapi generator](https://openapi-generator.tech/). With `npx` and `java`  installed locally, python client could be generated by running    ``` npx @openapitools/openapi-generator-cli generate -i openapi.json -g python -o python-client ``` 
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: support@cochl.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.cochl.sense.api;

import ai.cochl.client.ApiCallback;
import ai.cochl.client.ApiClient;
import ai.cochl.client.ApiException;
import ai.cochl.client.ApiResponse;
import ai.cochl.client.Configuration;
import ai.cochl.client.Pair;
import ai.cochl.client.ProgressRequestBody;
import ai.cochl.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ai.cochl.sense.model.AudioChunk;
import ai.cochl.sense.model.CreateSession;
import ai.cochl.sense.model.GenericError;
import ai.cochl.sense.model.SessionRefs;
import ai.cochl.sense.model.SessionStatus;
import ai.cochl.sense.model.UpdateSession;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AudioSessionApi {
    private ApiClient localVarApiClient;

    public AudioSessionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AudioSessionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createSession
     * @param createSession  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> session was created successfully  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed. For instance api key is missing or invalid  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionCall(CreateSession createSession, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createSession;

        // create path and map variables
        String localVarPath = "/audio_sessions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionValidateBeforeCall(CreateSession createSession, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createSession' is set
        if (createSession == null) {
            throw new ApiException("Missing the required parameter 'createSession' when calling createSession(Async)");
        }
        

        okhttp3.Call localVarCall = createSessionCall(createSession, _callback);
        return localVarCall;

    }

    /**
     * Create Session
     * Create a new session. An api key is required. Session parameters are  immutable and can be set at creation only 
     * @param createSession  (required)
     * @return SessionRefs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> session was created successfully  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed. For instance api key is missing or invalid  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public SessionRefs createSession(CreateSession createSession) throws ApiException {
        ApiResponse<SessionRefs> localVarResp = createSessionWithHttpInfo(createSession);
        return localVarResp.getData();
    }

    /**
     * Create Session
     * Create a new session. An api key is required. Session parameters are  immutable and can be set at creation only 
     * @param createSession  (required)
     * @return ApiResponse&lt;SessionRefs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> session was created successfully  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed. For instance api key is missing or invalid  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SessionRefs> createSessionWithHttpInfo(CreateSession createSession) throws ApiException {
        okhttp3.Call localVarCall = createSessionValidateBeforeCall(createSession, null);
        Type localVarReturnType = new TypeToken<SessionRefs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Session (asynchronously)
     * Create a new session. An api key is required. Session parameters are  immutable and can be set at creation only 
     * @param createSession  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> session was created successfully  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed. For instance api key is missing or invalid  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionAsync(CreateSession createSession, final ApiCallback<SessionRefs> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionValidateBeforeCall(createSession, _callback);
        Type localVarReturnType = new TypeToken<SessionRefs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSession
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> session successfully deleted  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSessionCall(String sessionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audio_sessions/{session_id}"
            .replaceAll("\\{" + "session_id" + "\\}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSessionValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteSession(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSessionCall(sessionId, _callback);
        return localVarCall;

    }

    /**
     * Delete Session
     * Change state of session to *deleted*. All future call on the session  will return 404 
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> session successfully deleted  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSession(String sessionId) throws ApiException {
        deleteSessionWithHttpInfo(sessionId);
    }

    /**
     * Delete Session
     * Change state of session to *deleted*. All future call on the session  will return 404 
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> session successfully deleted  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSessionWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = deleteSessionValidateBeforeCall(sessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Session (asynchronously)
     * Change state of session to *deleted*. All future call on the session  will return 404 
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> session successfully deleted  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSessionAsync(String sessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSessionValidateBeforeCall(sessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for readStatus
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param offset how many existing elements to skip before returning the first result control how many result to receive  (optional, default to 0)
     * @param count limit the length of the returned results array to limit size of the returned payload   (optional, default to 1024)
     * @param nextToken next token can be used from a previous page result. It allows to  iterate through all next elements of a collection. If next_token is  set, offset and limit will be ignored  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readStatusCall(String sessionId, Integer offset, Integer count, String nextToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audio_sessions/{session_id}/status"
            .replaceAll("\\{" + "session_id" + "\\}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readStatusValidateBeforeCall(String sessionId, Integer offset, Integer count, String nextToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling readStatus(Async)");
        }
        

        okhttp3.Call localVarCall = readStatusCall(sessionId, offset, count, nextToken, _callback);
        return localVarCall;

    }

    /**
     * Read Status
     * Get session status  *Note that if all chunks didn&#39;t finish to be inferenced, server will  wait at least one result to be  available in the required page range before returning result. Such waiting can lead to http requests timeout. Therefore we recommand to implement a client retry logic* 
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param offset how many existing elements to skip before returning the first result control how many result to receive  (optional, default to 0)
     * @param count limit the length of the returned results array to limit size of the returned payload   (optional, default to 1024)
     * @param nextToken next token can be used from a previous page result. It allows to  iterate through all next elements of a collection. If next_token is  set, offset and limit will be ignored  (optional)
     * @return SessionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public SessionStatus readStatus(String sessionId, Integer offset, Integer count, String nextToken) throws ApiException {
        ApiResponse<SessionStatus> localVarResp = readStatusWithHttpInfo(sessionId, offset, count, nextToken);
        return localVarResp.getData();
    }

    /**
     * Read Status
     * Get session status  *Note that if all chunks didn&#39;t finish to be inferenced, server will  wait at least one result to be  available in the required page range before returning result. Such waiting can lead to http requests timeout. Therefore we recommand to implement a client retry logic* 
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param offset how many existing elements to skip before returning the first result control how many result to receive  (optional, default to 0)
     * @param count limit the length of the returned results array to limit size of the returned payload   (optional, default to 1024)
     * @param nextToken next token can be used from a previous page result. It allows to  iterate through all next elements of a collection. If next_token is  set, offset and limit will be ignored  (optional)
     * @return ApiResponse&lt;SessionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SessionStatus> readStatusWithHttpInfo(String sessionId, Integer offset, Integer count, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = readStatusValidateBeforeCall(sessionId, offset, count, nextToken, null);
        Type localVarReturnType = new TypeToken<SessionStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read Status (asynchronously)
     * Get session status  *Note that if all chunks didn&#39;t finish to be inferenced, server will  wait at least one result to be  available in the required page range before returning result. Such waiting can lead to http requests timeout. Therefore we recommand to implement a client retry logic* 
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param offset how many existing elements to skip before returning the first result control how many result to receive  (optional, default to 0)
     * @param count limit the length of the returned results array to limit size of the returned payload   (optional, default to 1024)
     * @param nextToken next token can be used from a previous page result. It allows to  iterate through all next elements of a collection. If next_token is  set, offset and limit will be ignored  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readStatusAsync(String sessionId, Integer offset, Integer count, String nextToken, final ApiCallback<SessionStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = readStatusValidateBeforeCall(sessionId, offset, count, nextToken, _callback);
        Type localVarReturnType = new TypeToken<SessionStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSession
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param updateSession  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> session has been updated successfully  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSessionCall(String sessionId, UpdateSession updateSession, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateSession;

        // create path and map variables
        String localVarPath = "/audio_sessions/{session_id}"
            .replaceAll("\\{" + "session_id" + "\\}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSessionValidateBeforeCall(String sessionId, UpdateSession updateSession, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateSession(Async)");
        }
        
        // verify the required parameter 'updateSession' is set
        if (updateSession == null) {
            throw new ApiException("Missing the required parameter 'updateSession' when calling updateSession(Async)");
        }
        

        okhttp3.Call localVarCall = updateSessionCall(sessionId, updateSession, _callback);
        return localVarCall;

    }

    /**
     * Update Session
     * Update a session 
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param updateSession  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> session has been updated successfully  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public void updateSession(String sessionId, UpdateSession updateSession) throws ApiException {
        updateSessionWithHttpInfo(sessionId, updateSession);
    }

    /**
     * Update Session
     * Update a session 
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param updateSession  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> session has been updated successfully  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateSessionWithHttpInfo(String sessionId, UpdateSession updateSession) throws ApiException {
        okhttp3.Call localVarCall = updateSessionValidateBeforeCall(sessionId, updateSession, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Session (asynchronously)
     * Update a session 
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param updateSession  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> session has been updated successfully  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSessionAsync(String sessionId, UpdateSession updateSession, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSessionValidateBeforeCall(sessionId, updateSession, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadChunk
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param chunkSequence chunk represent the chunk number. This is needs to be  counter  starting from 0 and growing by one on each requests   (required)
     * @param audioChunk raw binary chunk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> chunk successfully uploaded  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> session is not writeable anymore  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> chunk sequence is invalid  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> audio chunk size must be smaller than 1MiB  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadChunkCall(String sessionId, Integer chunkSequence, AudioChunk audioChunk, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = audioChunk;

        // create path and map variables
        String localVarPath = "/audio_sessions/{session_id}/chunks/{chunk_sequence}"
            .replaceAll("\\{" + "session_id" + "\\}", localVarApiClient.escapeString(sessionId.toString()))
            .replaceAll("\\{" + "chunk_sequence" + "\\}", localVarApiClient.escapeString(chunkSequence.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadChunkValidateBeforeCall(String sessionId, Integer chunkSequence, AudioChunk audioChunk, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling uploadChunk(Async)");
        }
        
        // verify the required parameter 'chunkSequence' is set
        if (chunkSequence == null) {
            throw new ApiException("Missing the required parameter 'chunkSequence' when calling uploadChunk(Async)");
        }
        
        // verify the required parameter 'audioChunk' is set
        if (audioChunk == null) {
            throw new ApiException("Missing the required parameter 'audioChunk' when calling uploadChunk(Async)");
        }
        

        okhttp3.Call localVarCall = uploadChunkCall(sessionId, chunkSequence, audioChunk, _callback);
        return localVarCall;

    }

    /**
     * Upload Chunk
     * Upload new audio chunk  
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param chunkSequence chunk represent the chunk number. This is needs to be  counter  starting from 0 and growing by one on each requests   (required)
     * @param audioChunk raw binary chunk  (required)
     * @return SessionRefs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> chunk successfully uploaded  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> session is not writeable anymore  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> chunk sequence is invalid  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> audio chunk size must be smaller than 1MiB  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public SessionRefs uploadChunk(String sessionId, Integer chunkSequence, AudioChunk audioChunk) throws ApiException {
        ApiResponse<SessionRefs> localVarResp = uploadChunkWithHttpInfo(sessionId, chunkSequence, audioChunk);
        return localVarResp.getData();
    }

    /**
     * Upload Chunk
     * Upload new audio chunk  
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param chunkSequence chunk represent the chunk number. This is needs to be  counter  starting from 0 and growing by one on each requests   (required)
     * @param audioChunk raw binary chunk  (required)
     * @return ApiResponse&lt;SessionRefs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> chunk successfully uploaded  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> session is not writeable anymore  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> chunk sequence is invalid  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> audio chunk size must be smaller than 1MiB  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SessionRefs> uploadChunkWithHttpInfo(String sessionId, Integer chunkSequence, AudioChunk audioChunk) throws ApiException {
        okhttp3.Call localVarCall = uploadChunkValidateBeforeCall(sessionId, chunkSequence, audioChunk, null);
        Type localVarReturnType = new TypeToken<SessionRefs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Chunk (asynchronously)
     * Upload new audio chunk  
     * @param sessionId session id represents unique identifier for an audio session  (required)
     * @param chunkSequence chunk represent the chunk number. This is needs to be  counter  starting from 0 and growing by one on each requests   (required)
     * @param audioChunk raw binary chunk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> chunk successfully uploaded  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> parameter is missing or not formated properly  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> session is not writeable anymore  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resources doesn&#39;t exist or has been deleted  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> chunk sequence is invalid  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> audio chunk size must be smaller than 1MiB  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unexpected server error. If error persists, you can  contact support@cochl.ai to fix the problem.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadChunkAsync(String sessionId, Integer chunkSequence, AudioChunk audioChunk, final ApiCallback<SessionRefs> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadChunkValidateBeforeCall(sessionId, chunkSequence, audioChunk, _callback);
        Type localVarReturnType = new TypeToken<SessionRefs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
